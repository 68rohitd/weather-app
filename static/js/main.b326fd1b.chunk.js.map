{"version":3,"sources":["Components/Card/Card.jsx","Components/Layout/Graph.jsx","Components/Layout/Header.jsx","Components/Layout/DashBoard.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","getInfo","data","index","setState","min","temp","max","cardNumber","activeCardFunction","getDate","unixTime","Date","toDateString","state","this","i","className","src","weather","icon","style","height","width","alignSelf","alt","dt","borderColor","day","toFixed","activeCardNumber","description","toUpperCase","onClick","Component","Graph","graphData","labels","weekDays","datasets","label","minTempArray","fill","backgroundColor","maxTempArray","display","justifyContent","options","title","fontSize","legend","position","scales","yAxes","scaleLabel","labelString","gridLines","lineWidth","xAxes","Header","DashBoard","onChange","e","target","name","value","getCityWeather","a","preventDefault","Axios","get","city","cityWeather","latitude","coord","lat","longitude","lon","weatherData","daily","currentCity","console","log","activeCard","getMinTempArray","arr","forEach","push","getMaxTempArray","getWeekDays","dayNames","todayDayNumber","getDay","limit","type","placeholder","aria-describedby","id","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b326fd1b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../../Assets/Card.css\";\r\n\r\nexport default class Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      min: 0,\r\n      max: 0,\r\n      cardNumber: -1,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let data = this.props.data;\r\n\r\n    if (data) {\r\n      this.setState({\r\n        min: data.temp.min,\r\n        max: data.temp.max,\r\n      });\r\n    }\r\n  }\r\n\r\n  getInfo = (data, index) => {\r\n    this.setState({\r\n      min: data.temp.min,\r\n      max: data.temp.max,\r\n      cardNumber: index,\r\n    });\r\n\r\n    this.props.activeCardFunction(index);\r\n  };\r\n\r\n  getDate = (unixTime) => {\r\n    const milliseconds = unixTime * 1000;\r\n    const dateObject = new Date(milliseconds);\r\n    const date = dateObject.toDateString();\r\n\r\n    return date;\r\n  };\r\n\r\n  render() {\r\n    const data = this.props.data;\r\n    const index = this.props.i;\r\n\r\n    return (\r\n        <div className=\"card m-1 myCard\">\r\n          <img\r\n            src={`https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`}\r\n            style={{ height: \"80px\", width: \"80px\", alignSelf: \"center\" }}\r\n            className=\"card-img-top m-2\"\r\n            alt=\"...\"\r\n          ></img>\r\n\r\n          <div className=\"card-body pt-0\">\r\n            <h5 className=\"card-title date text-center\">\r\n              {this.getDate(data.dt)}\r\n            </h5>\r\n\r\n            <hr style={{ borderColor: \"white\" }} />\r\n            \r\n            <p className=\"text-center mainTemperature mb-0\">\r\n              {data.temp.day.toFixed()} 째C\r\n            </p>\r\n\r\n            {this.props.activeCardNumber === index ? (\r\n              <div className=\"text-center\">\r\n                <p className=\"card-text description\">\r\n                  {data.weather[0].description.toUpperCase()}{\" \"}\r\n                </p>\r\n\r\n                <p>\r\n                  Min Temp: <b>{this.state.min.toFixed(0)} 째C</b> <br />\r\n                  Max Temp: <b>{this.state.max.toFixed(0)} 째C</b>\r\n                </p>\r\n              </div>\r\n            ) : (\r\n              <div className=\"text-center\">\r\n                <p className=\"card-text description\">\r\n                  {data.weather[0].description.toUpperCase()}\r\n                </p>\r\n                <button\r\n                  className=\"btn btn-light btn-block\"\r\n                  onClick={() => this.getInfo(data, index)}\r\n                >\r\n                  More Info\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nexport default class Graph extends Component {\r\n  render() {\r\n    let graphData = {\r\n      labels: this.props.weekDays,\r\n      datasets: [\r\n        {\r\n          label: \"Min Temp\",\r\n          data: this.props.minTempArray,\r\n          fill: true,\r\n          backgroundColor: \"rgba(75,192,192,0.2)\",\r\n          borderColor: \"rgba(75,192,192,1)\",\r\n        },\r\n        {\r\n          label: \"Max Temp\",\r\n          data: this.props.maxTempArray,\r\n          fill: true,\r\n          borderColor: \"#742774\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    return (\r\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <div style={{ width: \"550px\" }}>\r\n          <Line\r\n            data={graphData}\r\n            options={{\r\n              title: {\r\n                display: true,\r\n                fontSize: 20,\r\n              },\r\n              legend: {\r\n                display: true,\r\n                position: \"right\",\r\n              },\r\n              scales: {\r\n                yAxes: [\r\n                  {scaleLabel: {\r\n                      display: true,\r\n                      labelString: \"Temperature (째C)\"\r\n                  },\r\n                    gridLines: {\r\n                      lineWidth: 0,\r\n                    },\r\n                  },\r\n                ],\r\n                xAxes: [\r\n                  {\r\n                    gridLines: {\r\n                      lineWidth: 0,\r\n                    },\r\n                  },\r\n                ],\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar mb-3 p-0 px-4 myHeading\">\r\n          <span className=\"navbar-brand mb-0 h1\">\r\n            <img\r\n              src=\"https://cdn.iconscout.com/icon/free/png-256/weather-192-461761.png\"\r\n              style={{ height: \"40px\" }}\r\n              alt=\"\"\r\n            />{\" \"}\r\n            AccuWeather\r\n          </span>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Card from \"../Card/Card\";\r\nimport Axios from \"axios\";\r\nimport Graph from \"./Graph\";\r\nimport Header from \"./Header\";\r\n\r\nexport default class DashBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      weatherData: [],\r\n      activeCardNumber: -1,\r\n      limit: 5,\r\n      city: \"\",\r\n      currentCity: \"Panjim\",\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const weatherData = await Axios.get(\r\n      \"https://api.openweathermap.org/data/2.5/onecall?lat=15.4909&lon=73.8278&exclude=hourly,minutely&units=metric&appid=60cb22eb49b77d6a6361e9192bbed2ec\"\r\n    );\r\n\r\n    this.setState({\r\n      weatherData: weatherData.data.daily,\r\n    });\r\n  }\r\n\r\n  onChange = (e) => [\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    }),\r\n  ];\r\n\r\n  getCityWeather = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      let cityWeather = await Axios.get(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&units=metric&appid=60cb22eb49b77d6a6361e9192bbed2ec`\r\n      );\r\n\r\n      const latitude = cityWeather.data.coord.lat;\r\n      const longitude = cityWeather.data.coord.lon;\r\n\r\n      cityWeather = await Axios.get(\r\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=hourly,minutely&units=metric&appid=60cb22eb49b77d6a6361e9192bbed2ec`\r\n      );\r\n\r\n      this.setState({\r\n        weatherData: cityWeather.data.daily,\r\n        currentCity: this.state.city,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  activeCard = (activeCardNumber) => {\r\n    this.setState({\r\n      activeCardNumber,\r\n    });\r\n  };\r\n\r\n  getMinTempArray = () => {\r\n    try {\r\n      let arr = [];\r\n      this.state.weatherData.forEach((data) =>\r\n        arr.push(data.temp.min.toFixed(0))\r\n      );\r\n\r\n      return arr;\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  getMaxTempArray = () => {\r\n    try {\r\n      let arr = [];\r\n      this.state.weatherData.forEach((data) =>\r\n        arr.push(data.temp.max.toFixed(0))\r\n      );\r\n      return arr;\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  getWeekDays = () => {\r\n    let dayNames = [\"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thur\", \"Fri\", \"Sat\", \"Sun\"];\r\n    let d = new Date();\r\n    let todayDayNumber = d.getDay();\r\n\r\n    let weekDays = [];\r\n    for (let i = todayDayNumber; i <= 6; i++) weekDays.push(dayNames[i]);\r\n    for (let i = 0; i < todayDayNumber; i++) weekDays.push(dayNames[i]);\r\n    return weekDays;\r\n  };\r\n\r\n  render() {\r\n    let { weatherData } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"row m-0 mb-3\">\r\n          <div className=\"col\">\r\n            <div className=\"row\">\r\n              <Header />\r\n            </div>\r\n\r\n            {/* left part */}\r\n            <div className=\"row\">\r\n              <form className=\"container mt-3\">\r\n                <div className=\"form-group\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col\">\r\n                      <label>Enter Number of Days</label>\r\n                      <input\r\n                        className=\"form-control container daysInput\"\r\n                        value={this.state.limit}\r\n                        onChange={this.onChange}\r\n                        type=\"number\"\r\n                        name=\"limit\"\r\n                        min=\"1\"\r\n                        max=\"7\"\r\n                      ></input>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <label>Enter City</label>\r\n                  <div className=\"input-group mb-3\">\r\n                    <input\r\n                      type=\"text\"\r\n                      value={this.state.city}\r\n                      onChange={this.onChange}\r\n                      className=\"form-control container\"\r\n                      name=\"city\"\r\n                      placeholder=\"Panjim\"\r\n                      aria-describedby=\"button-addon2\"\r\n                    />\r\n                    <div className=\"input-group-append\">\r\n                      <button\r\n                        onClick={this.getCityWeather}\r\n                        className=\"btn btn-secondary\"\r\n                        type=\"button\"\r\n                        id=\"button-addon2\"\r\n                      >\r\n                        Search\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* graph */}\r\n          <div className=\"col\">\r\n            <Graph\r\n              minTempArray={this.getMinTempArray()}\r\n              maxTempArray={this.getMaxTempArray()}\r\n              weekDays={this.getWeekDays()}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className=\"container-fluid\"\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          {weatherData.map((weatherData, index) =>\r\n            index < this.state.limit ? (\r\n              <Card\r\n                i={index}\r\n                data={weatherData}\r\n                key={index}\r\n                activeCardFunction={this.activeCard}\r\n                activeCardNumber={this.state.activeCardNumber}\r\n              />\r\n            ) : null\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./App.css\";\r\nimport DashBoard from \"./Components/Layout/DashBoard\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <DashBoard />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}